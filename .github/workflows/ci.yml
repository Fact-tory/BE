# =================================
# CommonGround BE CI/CD Pipeline
# 코드 품질 검사, 테스트 실행, 빌드 자동화
# =================================

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 동시 실행 제한 (같은 브랜치에서는 최신 워크플로우만 실행)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =================================
  # 코드 품질 검사 및 보안 스캔
  # =================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarQube를 위한 전체 히스토리
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Checkstyle과 SpotBugs는 build.gradle에 플러그인이 있어야 작동
    # 현재 프로젝트에 해당 플러그인이 없으므로 주석 처리
    # - name: Run Checkstyle
    #   run: ./gradlew checkstyleMain checkstyleTest
    # 
    # - name: Run SpotBugs
    #   run: ./gradlew spotbugsMain spotbugsTest
    
    - name: Compile and check syntax
      run: ./gradlew compileJava compileTestJava
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          build/reports/checkstyle/
          build/reports/spotbugs/

  # =================================
  # 단위 테스트 및 통합 테스트
  # =================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      # 테스트용 MySQL
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: factory_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      # 테스트용 Redis
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest_root_password --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
    
    - name: Run unit tests
      run: ./gradlew test
      env:
        # 테스트용 환경변수
        SPRING_PROFILES_ACTIVE: test
        DB_URL: 127.0.0.1:3306
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test-jwt-secret-key-for-unit-testing-only
        ENCRYPTION_SECRET_KEY: test-encryption-key-32-chars-long
        ADMIN_MASTER_TOKEN: test-admin-master-token
        ADMIN_TOKEN_IDENTIFIER: test-admin
    
    # integrationTest 태스크가 build.gradle에 정의되어 있지 않으므로 주석 처리
    # 필요시 build.gradle에 integrationTest 태스크를 추가하고 활성화
    # - name: Run integration tests
    #   run: ./gradlew integrationTest
    
    - name: Run all tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_URL: 127.0.0.1:3306
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test-jwt-secret-key-for-integration-testing
        ENCRYPTION_SECRET_KEY: test-encryption-key-32-chars-long
        ADMIN_MASTER_TOKEN: test-admin-master-token
        ADMIN_TOKEN_IDENTIFIER: test-admin
    
    # JaCoCo 플러그인이 build.gradle에 있어야 작동
    # 현재 프로젝트에 JaCoCo 플러그인이 없으므로 주석 처리
    # - name: Generate test report
    #   run: ./gradlew jacocoTestReport
    #   if: always()
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          build/reports/tests/
          build/reports/jacoco/test/html/
    
    # Codecov 업로드도 JaCoCo 리포트가 있어야 하므로 주석 처리
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: build/reports/jacoco/test/jacocoTestReport.xml
    #     flags: unittests
    #     name: codecov-umbrella

  # =================================
  # 애플리케이션 빌드
  # =================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build -x test  # 테스트는 이미 실행했으므로 제외
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact
        path: build/libs/*.jar

  # =================================
  # Docker 이미지 빌드 (메인 브랜치만)
  # =================================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: build/libs/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: commonground/be
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =================================
  # 보안 취약점 스캔
  # =================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'repo'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'