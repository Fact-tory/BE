# =================================
# Factory BE CD Pipeline
# 운영 환경 배포 자동화
# =================================

name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  
  # 수동 배포 트리거
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================================
  # 운영 환경별 배포
  # =================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: factory-be-staging
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to ECS Staging
      run: |
        aws ecs update-service \
          --cluster factory-staging-cluster \
          --service factory-be-staging-service \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster factory-staging-cluster \
          --services factory-be-staging-service
    
    - name: Run health checks
      run: |
        # 헬스체크 URL (로드밸런서 또는 직접 접근)
        HEALTH_URL="${{ secrets.STAGING_HEALTH_CHECK_URL }}"
        
        # 최대 5분 대기 (30초씩 10번)
        for i in {1..10}; do
          if curl -f "$HEALTH_URL/actuator/health"; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check failed, retrying in 30 seconds..."
          sleep 30
        done
        
        echo "Health check failed after 5 minutes"
        exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: '🚀 Factory BE successfully deployed to Staging!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '❌ Factory BE deployment to Staging failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =================================
  # 프로덕션 배포 (태그 기반)
  # =================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://api.factory.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.sha }}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: factory-be-production
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Create deployment backup
      run: |
        # 현재 실행 중인 태스크 정의 백업
        aws ecs describe-services \
          --cluster factory-production-cluster \
          --services factory-be-production-service \
          --query 'services[0].taskDefinition' \
          --output text > previous-task-definition.txt
        
        echo "Previous task definition: $(cat previous-task-definition.txt)"
    
    - name: Deploy to ECS Production
      run: |
        aws ecs update-service \
          --cluster factory-production-cluster \
          --service factory-be-production-service \
          --force-new-deployment
    
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster factory-production-cluster \
          --services factory-be-production-service
    
    - name: Run health checks
      run: |
        HEALTH_URL="${{ secrets.PRODUCTION_HEALTH_CHECK_URL }}"
        
        # 프로덕션은 더 엄격한 헬스체크 (10분 대기)
        for i in {1..20}; do
          if curl -f "$HEALTH_URL/actuator/health"; then
            echo "Health check passed!"
            # 추가 검증: 핵심 API 엔드포인트 테스트
            if curl -f "$HEALTH_URL/api/v1/health"; then
              echo "API health check passed!"
              exit 0
            fi
          fi
          echo "Health check failed, retrying in 30 seconds..."
          sleep 30
        done
        
        echo "Health check failed after 10 minutes"
        exit 1
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        PREVIOUS_TASK_DEF=$(cat previous-task-definition.txt)
        
        aws ecs update-service \
          --cluster factory-production-cluster \
          --service factory-be-production-service \
          --task-definition "$PREVIOUS_TASK_DEF"
        
        echo "Rollback initiated to: $PREVIOUS_TASK_DEF"
    
    - name: Create GitHub Release
      if: success() && startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## 🚀 Factory BE ${{ steps.version.outputs.VERSION }}
          
          ### 주요 변경사항
          - 자동 생성된 릴리즈입니다.
          - 상세한 변경사항은 커밋 히스토리를 확인해주세요.
          
          ### 배포 환경
          - **Production**: ✅ 배포 완료
          - **Health Check**: ✅ 통과
          
          배포 시간: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
    
    - name: Notify production deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: |
          🎉 Factory BE ${{ steps.version.outputs.VERSION }} successfully deployed to Production!
          
          🔗 Health Check: ${{ secrets.PRODUCTION_HEALTH_CHECK_URL }}/actuator/health
          📊 Monitoring: ${{ secrets.MONITORING_DASHBOARD_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify production deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: |
          🚨 Factory BE deployment to Production failed!
          
          🔄 Rollback has been initiated
          🔍 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}