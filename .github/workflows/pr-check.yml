# =================================
# Factory BE PR Check
# PR 검증을 위한 전용 워크플로우
# =================================

name: PR Check

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# PR별로 하나씩만 실행
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # =================================
  # PR 정보 및 변경사항 분석
  # =================================
  pr-info:
    name: PR Analysis
    runs-on: ubuntu-latest
    outputs:
      has-java-changes: ${{ steps.changes.outputs.java }}
      has-test-changes: ${{ steps.changes.outputs.test }}
      has-gradle-changes: ${{ steps.changes.outputs.gradle }}
      has-docker-changes: ${{ steps.changes.outputs.docker }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # 변경된 파일 유형 분석
    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          java:
            - 'src/main/java/**/*.java'
          test:
            - 'src/test/java/**/*.java'
          gradle:
            - 'build.gradle'
            - 'gradle/**'
            - 'gradlew*'
          docker:
            - 'Dockerfile'
            - 'docker-compose*.yml'
            - '.dockerignore'
    
    # PR 크기 분석
    - name: Analyze PR size
      run: |
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | wc -l)
        LINES_ADDED=$(git diff --shortstat origin/main...HEAD | awk '{print $4}')
        LINES_DELETED=$(git diff --shortstat origin/main...HEAD | awk '{print $6}')
        
        echo "Changed files: $CHANGED_FILES"
        echo "Lines added: ${LINES_ADDED:-0}"
        echo "Lines deleted: ${LINES_DELETED:-0}"
        
        if [ "$CHANGED_FILES" -gt 50 ]; then
          echo "⚠️ Large PR detected ($CHANGED_FILES files changed)"
          echo "Consider splitting this PR into smaller changes"
        fi

  # =================================
  # Java 코드 변경시 컴파일 및 테스트
  # =================================
  java-check:
    name: Java Code Check
    runs-on: ubuntu-latest
    needs: pr-info
    if: needs.pr-info.outputs.has-java-changes == 'true' || needs.pr-info.outputs.has-test-changes == 'true'
    
    services:
      # 경량화된 테스트 환경
      redis:
        image: redis:7.0-alpine
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # 변경된 파일만 컴파일 체크 (최적화)
    - name: Compile changed code
      run: ./gradlew compileJava compileTestJava
    
    # 테스트 실행 (병렬)
    - name: Run tests
      run: ./gradlew test -Dspring.profiles.active=test --parallel
      env:
        SPRING_PROFILES_ACTIVE: test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test-pr-jwt-secret-32-characters
        ENCRYPTION_SECRET_KEY: test-pr-encryption-key-32chars
        ADMIN_MASTER_TOKEN: test-pr-admin
        ADMIN_TOKEN_IDENTIFIER: test-admin
    
    # 테스트 결과 댓글 작성
    - name: Comment test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Test Results
        path: build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: false

  # =================================
  # 빌드 시스템 변경 검증
  # =================================
  build-check:
    name: Build System Check
    runs-on: ubuntu-latest
    needs: pr-info
    if: needs.pr-info.outputs.has-gradle-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    # 의존성 체크
    - name: Check dependencies
      run: |
        ./gradlew dependencies --configuration compileClasspath
        ./gradlew dependencies --configuration runtimeClasspath

    # 빌드 성능 체크
    - name: Build performance test
      run: |
        time ./gradlew clean build -x test
        echo "Build completed successfully"

  # =================================
  # Docker 관련 변경 검증
  # =================================
  docker-check:
    name: Docker Check
    runs-on: ubuntu-latest
    needs: pr-info
    if: needs.pr-info.outputs.has-docker-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Dockerfile 문법 체크
    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
    
    # Docker 이미지 빌드 테스트
    - name: Build Docker image
      run: |
        # 빌드 가능한지만 확인 (푸시 안함)
        docker build -t factory-be:pr-test .
    
    # Docker Compose 검증
    - name: Validate docker-compose
      if: needs.pr-info.outputs.has-docker-changes == 'true'
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.dev.yml config

  # =================================
  # 전체 PR 상태 요약
  # =================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-info, java-check, build-check, docker-check]
    if: always()
    
    steps:
    - name: Create PR summary comment
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;
          
          let summary = "## 🔍 PR Check Summary\n\n";
          
          // 체크 결과 요약
          const results = [
            { name: "Java Code", job: "${{ needs.java-check.result }}" },
            { name: "Build System", job: "${{ needs.build-check.result }}" },
            { name: "Docker", job: "${{ needs.docker-check.result }}" }
          ];
          
          results.forEach(result => {
            if (result.job === 'success') {
              summary += `✅ ${result.name} - 통과\n`;
            } else if (result.job === 'failure') {
              summary += `❌ ${result.name} - 실패\n`;
            } else if (result.job === 'skipped') {
              summary += `⏭️ ${result.name} - 건너뜀\n`;
            }
          });
          
          summary += `\n**변경사항:**\n`;
          summary += `- Java 파일: ${{ needs.pr-info.outputs.has-java-changes == 'true' && '변경됨' || '변경 없음' }}\n`;
          summary += `- 테스트 파일: ${{ needs.pr-info.outputs.has-test-changes == 'true' && '변경됨' || '변경 없음' }}\n`;
          summary += `- Gradle 설정: ${{ needs.pr-info.outputs.has-gradle-changes == 'true' && '변경됨' || '변경 없음' }}\n`;
          summary += `- Docker 설정: ${{ needs.pr-info.outputs.has-docker-changes == 'true' && '변경됨' || '변경 없음' }}\n`;
          
          // 기존 댓글 찾기
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pr_number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Check Summary')
          );
          
          // 댓글 업데이트 또는 생성
          if (botComment) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: summary
            });
          }